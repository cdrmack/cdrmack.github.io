<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
     xmlns:georss="http://www.georss.org/georss"
     xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"
     xmlns:media="http://search.yahoo.com/mrss/"><channel>
  <title>~cdrmack RSS</title>
  <atom:link href="https://cdrmack.dev/rss.xml" rel="self" type="application/rss+xml" />
  <link>https://cdrmack.dev</link>
  <description><![CDATA[~cdrmack RSS]]></description>
  <language>en</language>
  <pubDate>Wed, 11 Jun 2025 19:57:08 +0200</pubDate>
  <lastBuildDate>Wed, 11 Jun 2025 19:57:08 +0200</lastBuildDate>
  <generator>Emacs 31.0 Org-mode 9.7.11</generator>
  <webMaster> (cdrmack)</webMaster>
  <image>
    <url>https://orgmode.org/img/org-mode-unicorn-logo.png</url>
    <title>~cdrmack RSS</title>
    <link>https://cdrmack.dev</link>
  </image>

  <item>
    <title>Debian VM on FreeBSD</title>
    <link>https://cdrmack.dev/posts/2025-02-26_debian_vm_on_freebsd.html</link>
    <author> (cdrmack)</author>
    <guid isPermaLink="false">https://cdrmack.dev/posts/2025-02-26_debian_vm_on_freebsd.html</guid>
    <pubDate>Wed, 26 Feb 2025 00:00:00 +0100</pubDate>

    <description><![CDATA[<p>
    <code>bhyve(8)</code> is a hypervisor available on FreeBSD. I personally use <code>vm-bhyve(8)</code> to manage my virtual machines because I find it a bit easier.
    </p>

    <div class="org-src-container">
    <pre class="src src-shell">pkg install vm-bhyve
    </pre>
    </div>

    <p>
    You need dataset for virtual machines (if ZFS is being used).
    </p>

    <div class="org-src-container">
    <pre class="src src-shell">zfs create zroot/bhyve
    </pre>
    </div>

    <p>
    Update system configuration (<code>rc.conf(5)</code>).
    </p>

    <div class="org-src-container">
    <pre class="src src-shell">sysrc vm_enable="YES"
    sysrc vm_dir="zfs:zroot/bhyve"
    </pre>
    </div>

    <p>
    Run <code>vm init</code> to finish initialisation. This will create subdirectories inside the dataset.
    </p>

    <div class="org-src-container">
    <pre class="src src-shell">vm init
    </pre>
    </div>

    <p>
    To enable network for the VMs create virtual switch and attach network interface to it.
    </p>

    <div class="org-src-container">
    <pre class="src src-shell">vm switch create public
    vm switch add public re0
    </pre>
    </div>

    <p>
    Now you are ready to create Debian's VM. You can use sample config for this to make it easier.
    </p>

    <div class="org-src-container">
    <pre class="src src-shell">cp /usr/local/share/examples/vm-bhyve/debian.conf /zroot/bhyve/.templates/
    </pre>
    </div>

    <p>
    In my case I want to use debian template (<code>-t</code>) and specify disk image size (<code>-s</code>) to be 40G.
    The following command will create directory with config, disk image and log. This is a good moment to edit VM's config file and set things like RAM.
    </p>

    <div class="org-src-container">
    <pre class="src src-shell">vm create -t debian -s 40G debian_vm
    </pre>
    </div>

    <p>
    VM is now created but nothing is yet installed on it. Installation image is needed, it can be downloaded with <code>vm iso</code> (it will be placed inside <code>/zroot/bhyve/.iso/</code>).
    </p>

    <div class="org-src-container">
    <pre class="src src-shell">vm iso https://cdimage.debian.org/debian-cd/current/amd64/iso-dvd/debian-12.9.0-amd64-DVD-1.iso
    </pre>
    </div>

    <p>
    Install Debian on the VM.
    </p>

    <div class="org-src-container">
    <pre class="src src-shell">vm install -f debian_vm debian-12.9.0-amd64-DVD-1.iso
    </pre>
    </div>

    <p>
    After the installation VM is ready to be used.
    </p>

    <div class="org-src-container">
    <pre class="src src-shell">vm start debian_vm
    vm console debian_vm
    </pre>
    </div>

    <p>
    <code>vm(8)</code> uses <code>cu(1)</code>, to exit console back to the host use <code>~^D or ~.~</code>.
    </p>
    ]]></description>
  </item>
  <item>
    <title>ssh to VM</title>
    <link>https://cdrmack.dev/posts/2024-10-18_ssh_to_vm.html</link>
    <author> (cdrmack)</author>
    <guid isPermaLink="false">https://cdrmack.dev/posts/2024-10-18_ssh_to_vm.html</guid>
    <pubDate>Fri, 18 Oct 2024 00:00:00 +0200</pubDate>

    <description><![CDATA[<pre class="example" id="org3296ea6">
    Host: FreeBSD
    Guest (VM): NetBSD
    </pre>

    <p>
    Make sure <code>sshd(8)</code> is running on the guest.
    </p>

    <div class="org-src-container">
    <pre class="src src-shell">service sshd status
    </pre>
    </div>

    <p>
    If it's not you might need to add that daemon to the <code>rc.conf(5)</code>.
    </p>

    <div class="org-src-container">
    <pre class="src src-shell">sysrc sshd_enable="YES"
    </pre>
    </div>

    <p>
    It should run automatically after reboot but for now you probably have to start it manually.
    </p>

    <div class="org-src-container">
    <pre class="src src-shell">service sshd start
    </pre>
    </div>

    <p>
    With sshd enabled on guest make sure you try to connect to the correct system (VM) from the host.
    </p>

    <p>
    Run the following command on the guest to display fingerprint of its public key file.
    </p>

    <div class="org-src-container">
    <pre class="src src-shell">ssh-keygen -l -f /etc/ssh/ssh_host_ed25519_key.pub
    </pre>
    </div>

    <p>
    Try to ssh to the guest from host and compare fingerprints.
    </p>

    <div class="org-src-container">
    <pre class="src src-shell">ssh &lt;guest_IP&gt;
    </pre>
    </div>

    <hr />

    <p>
    Transfer host's public key to the guest with <code>scp(1)</code>.
    </p>

    <div class="org-src-container">
    <pre class="src src-shell">scp ~/.ssh/&lt;host_public_key&gt;.pub &lt;guest_user&gt;@&lt;guest_IP&gt;:
    </pre>
    </div>

    <p>
    Authorize host's public key on guest.
    </p>

    <div class="org-src-container">
    <pre class="src src-shell">cat &lt;host_public_key&gt;.pub &gt;&gt; ~/.ssh/authorized_keys
    </pre>
    </div>

    <p>
    It should be now possible to ssh to guest without credentials.
    </p>

    <div class="org-src-container">
    <pre class="src src-shell">ssh &lt;guest_user&gt;@&lt;guest_IP&gt;
    </pre>
    </div>

    <p>
    Consider adding entry to the <code>~/.ssh/config</code> to make it even easier.
    </p>

    <div class="org-src-container">
    <pre class="src src-example">Host &lt;name&gt;
    User &lt;guest_user&gt;
    HostName &lt;guest_IP&gt;
    IdentityFile ~/.ssh/&lt;host_private_key&gt;
    </pre>
    </div>

    <p>
    Now it's even better.
    </p>

    <div class="org-src-container">
    <pre class="src src-shell">ssh &lt;name&gt;
    </pre>
    </div>
    ]]></description>
  </item>
  <item>
    <title>crontab for individual users</title>
    <link>https://cdrmack.dev/posts/2024-10-16_crontab_for_individual_users.html</link>
    <author> (cdrmack)</author>
    <guid isPermaLink="false">https://cdrmack.dev/posts/2024-10-16_crontab_for_individual_users.html</guid>
    <pubDate>Wed, 16 Oct 2024 00:00:00 +0200</pubDate>

    <description><![CDATA[<p>
    I used to use root's <code>crontab(1)</code> even for things specific to my regular user.
    I didn't know that each user can have their own.
    </p>

    <p>
    Comparing to the root's <code>/etc/crontab</code> we do not need to specify as "who" the command should be run.
    </p>

    <div class="org-src-container">
    <pre class="src src-shell">crontab -e
    </pre>
    </div>

    <pre class="example" id="org76c342f">
    #minute	hour	mday	month	wday	command
    0	*	*	*	*	echo "do stuff every hour"
    </pre>
    ]]></description>
  </item>
  <item>
    <title>ssh agent</title>
    <link>https://cdrmack.dev/posts/2024-05-17_ssh_agent.html</link>
    <author> (cdrmack)</author>
    <guid isPermaLink="false">https://cdrmack.dev/posts/2024-05-17_ssh_agent.html</guid>
    <pubDate>Fri, 17 May 2024 00:00:00 +0200</pubDate>

    <description><![CDATA[<p>
    To use <code>ssh(1)</code> I first start <code>ssh-agent(1)</code>.
    I use <code>-c</code> to generate C-shell commands on stdout for csh-style shells and send that to <code>eval</code>.
    </p>

    <div class="org-src-container">
    <pre class="src src-shell">eval `ssh-agent -c`
    </pre>
    </div>

    <p>
    With ssh-agent running I use <code>ssh-add(1)</code> to add private key to it.
    </p>

    <div class="org-src-container">
    <pre class="src src-shell">ssh-add ~/.ssh/&lt;private_key&gt;
    </pre>
    </div>

    <p>
    That's it, <code>ssh-agent</code> will now hold that private key and use it for the public key authentication.
    If I want to list all identities currently represented by the agent I use <code>ssh-agent -l</code> command.
    </p>
    ]]></description>
  </item>
  <item>
    <title>amfora</title>
    <link>https://cdrmack.dev/posts/2024-04-04_amfora.html</link>
    <author> (cdrmack)</author>
    <guid isPermaLink="false">https://cdrmack.dev/posts/2024-04-04_amfora.html</guid>
    <pubDate>Thu, 04 Apr 2024 00:00:00 +0200</pubDate>

    <description><![CDATA[<p>
    If you want to play around with the <a href="https://geminiprotocol.net/">Gemini Protocol</a> on FreeBSD you can use program called <code>amfora</code> to view Gemini Capsules.
    It's a terminal browser easily available via <code>pkg(8)</code>.
    </p>

    <div class="org-src-container">
    <pre class="src src-shell">pkg install amfora
    </pre>
    </div>

    <p>
    When I run <code>amfora</code> I can press <code>?</code> to see list of shortcuts.
    </p>

    <p>
    My most used shortcuts:
    <code>1-0</code> go to links 0-10
    <code>SPC</code> enter address or link ID
    <code>b</code> go back in history
    <code>f</code> go forward in history
    <code>C-b</code> open bookmarks
    <code>C-d</code> add, change or remove bookmark
    </p>

    <p>
    If I want to go to the link "11" I press <code>SPC</code> and then provide link ID (11).
    </p>
    ]]></description>
  </item>
  <item>
    <title>fonts location</title>
    <link>https://cdrmack.dev/posts/2024-02-27_fonts_location.html</link>
    <author> (cdrmack)</author>
    <guid isPermaLink="false">https://cdrmack.dev/posts/2024-02-27_fonts_location.html</guid>
    <pubDate>Tue, 27 Feb 2024 00:00:00 +0100</pubDate>

    <description><![CDATA[<p>
    I've always stored my fonts inside the <code>~/.fonts</code> directory.
    </p>

    <p>
    I've decided to move all of them to <code>/usr/local/share/fonts/</code> after reading <code>/usr/local/etc/fonts/fonts.conf</code> file.
    </p>

    <div class="org-src-container">
    <pre class="src src-shell">&lt;!-- Font directory list --&gt;

    &lt;dir&gt;/usr/local/share/fonts&lt;/dir&gt;

    &lt;dir prefix="xdg"&gt;fonts&lt;/dir&gt;
    &lt;!-- the following element will be removed in the future --&gt;
    &lt;dir&gt;~/.fonts&lt;/dir&gt;
    </pre>
    </div>

    <p>
    Based on the comment "the following element will be removed in the future" I think it's safe to assume that <code>~/.fonts</code> might stop working at some point.
    </p>

    <p>
    Remember to run <code>fc-cache(1)</code> to scan the font directories and build cache files.
    I usually run it with <code>-f</code> flag to force re-generation.
    </p>
    ]]></description>
  </item>
  <item>
    <title>wireguard</title>
    <link>https://cdrmack.dev/posts/2023-11-28_wireguard.html</link>
    <author> (cdrmack)</author>
    <guid isPermaLink="false">https://cdrmack.dev/posts/2023-11-28_wireguard.html</guid>
    <pubDate>Tue, 28 Nov 2023 00:00:00 +0100</pubDate>

    <description><![CDATA[<p>
    After upgrading my system to FreeBSD 14.0, I've decided to finally try WireGuard.
    I didn't have to install it manually since it's now part of the FreeBSD kernel.
    </p>

    <p>
    Rather than use <code>wg(8)</code> directly, I've decided to play around with <code>wg-quick(8)</code> (<code>wireguard-tools</code> package).
    </p>

    <div class="org-src-container">
    <pre class="src src-shell">% pkg install wireguard-tools
    </pre>
    </div>

    <p>
    WireGuard supports INI-like config files, see the example below (taken from the <code>wg(8)</code>).
    </p>

    <pre class="example" id="orgcb625b3">
    [Interface]
    PrivateKey = yAnz5TF+lXXJte14tji3zlMNq+hd2rYUIgJBgB3fBmk=
    ListenPort = 51820

    [Peer]
    PublicKey = xTIBA5rboUvnH4htodjb6e697QjLERt1NAB4mZqp8Dg=
    Endpoint = 192.95.5.67:1234
    AllowedIPs = 10.192.122.3/32, 10.192.124.1/24
    </pre>

    <p>
    I've put few config files from my provider inside <code>/usr/local/etc/wireguard/</code>.
    These files can be used to add and set up interfaces.
    </p>

    <div class="org-src-container">
    <pre class="src src-shell">% wg-quick up /etc/wireguard/sample.conf
    </pre>
    </div>

    <p>
    I can skip the full path and just use the config name.
    </p>

    <div class="org-src-container">
    <pre class="src src-shell">% wg-quick up sample
    </pre>
    </div>

    <p>
    This works because <code>wg-quick</code> looks for configs inside <code>/usr/local/etc/wireguard/</code> directory.
    </p>

    <p>
    When I'm done with the given interface I use <code>wg-quick down</code> to tear it down.
    </p>

    <div class="org-src-container">
    <pre class="src src-shell">% wg-quick down sample
    </pre>
    </div>

    <p>
    To show current WireGuard configuration and runtime information I simply call <code>wg</code>.
    </p>
    ]]></description>
  </item>
  <item>
    <title>emacs server</title>
    <link>https://cdrmack.dev/posts/2023-11-04_emacs_server.html</link>
    <author> (cdrmack)</author>
    <guid isPermaLink="false">https://cdrmack.dev/posts/2023-11-04_emacs_server.html</guid>
    <pubDate>Sat, 04 Nov 2023 00:00:00 +0100</pubDate>

    <description><![CDATA[<p>
    I start Emacs in "server-mode" alongside my graphical environment.
    Whenever I want to use it, everything is already loaded and ready to go.
    Thanks to that, from my perspective it opens pretty much instantly.
    </p>

    <p>
    It can be easily set by editing <code>~/.xinitrc</code> file.
    This file is being used by <code>xinit(1)</code> to start the X Window System server and a first client program.
    </p>

    <div class="org-src-container">
    <pre class="src src-shell"># .xinitrc
    # ...
    emacs --daemon
    # ...
    </pre>
    </div>

    <p>
    According to <code>emacs(1)</code> the <code>emacs --daemon</code> command starts Emacs as daemon (o rly?), enables Emacs server and disconnects from the terminal.
    </p>

    <p>
    With server running in the background, I can connect to it with the <code>emacsclient(1)</code> command.
    </p>

    <div class="org-src-container">
    <pre class="src src-shell">% emacsclient -c -a ""
    </pre>
    </div>

    <p>
    To create a new frame, the flag <code>-c</code> is used.
    This is particularly useful when Emacs is already open but I don't want to reuse the existing frame.
    The second flag, <code>-a</code>, initiates an alternate editor if the Emacs server is not running.
    If it is left empty, as in this case, it runs <code>emacs --daemon</code> and attempts to connect to it.
    </p>

    <p>
    To make my life easier, I've placed that line in a file named <code>ec</code>, made it executable, and saved it in a directory within my <code>PATH</code> (<code>/usr/local/bin/</code>, to be specific).
    Now, I can launch Emacs client just like any other program.
    </p>
    ]]></description>
  </item>
</channel>
</rss>
