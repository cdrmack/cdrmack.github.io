<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
     xmlns:georss="http://www.georss.org/georss"
     xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"
     xmlns:media="http://search.yahoo.com/mrss/"><channel>
  <title>~cdrmack RSS</title>
  <atom:link href="https://cdrmack.dev/rss.xml" rel="self" type="application/rss+xml" />
  <link>https://cdrmack.dev</link>
  <description><![CDATA[~cdrmack RSS]]></description>
  <language>en</language>
  <pubDate>Sat, 18 May 2024 22:26:42 +0200</pubDate>
  <lastBuildDate>Sat, 18 May 2024 22:26:42 +0200</lastBuildDate>
  <generator>Emacs 29.3 Org-mode 9.6.15</generator>
  <webMaster> (cdrmack)</webMaster>
  <image>
    <url>https://orgmode.org/img/org-mode-unicorn-logo.png</url>
    <title>~cdrmack RSS</title>
    <link>https://cdrmack.dev</link>
  </image>


  <item>
    <title>ssh agent</title>
    <link>https://cdrmack.dev/posts/2024-05-17_ssh_agent.html</link>
    <author> (cdrmack)</author>
    <guid isPermaLink="false">https://cdrmack.dev/posts/2024-05-17_ssh_agent.html</guid>
    <pubDate>Fri, 17 May 2024 00:00:00 +0200</pubDate>

    <description><![CDATA[<p>
    To use <code>ssh(1)</code> we first need to start <code>ssh-agent(1)</code>. We use <code>-c</code> to generate C-shell commands on stdout for csh-style shells and <code>-s</code> for Bourne-shell.
    </p>

    <div class="org-src-container">
    <pre class="src src-shell">eval `ssh-agent -c`
    </pre>
    </div>

    <p>
    With ssh-agent running we need to <code>ssh-add(1)</code> our private key that we want to use.
    </p>

    <div class="org-src-container">
    <pre class="src src-shell">ssh-add ~/.ssh/&lt;your_private_key&gt;
    </pre>
    </div>

    <p>
    That's it, <code>ssh-agent</code> will now hold that private key and use it for public key authentication.
    You can list all identities currently represented by the agent with the <code>ssh-agent -l</code> command.
    </p>

    <p>
    To set this up automatically on login, just add these commands to your shell configuration file.
    As an example, for <code>tcsh(1)</code> use <code>~/.tcshrc</code>.
    </p>
    ]]></description>
  </item>
  <item>
    <title>ECSS</title>
    <link>https://cdrmack.dev/posts/2024-04-06_ecss.html</link>
    <author> (cdrmack)</author>
    <guid isPermaLink="false">https://cdrmack.dev/posts/2024-04-06_ecss.html</guid>
    <pubDate>Sat, 06 Apr 2024 00:00:00 +0200</pubDate>

    <description><![CDATA[<p>
    I'm currently trying to enter the space industry and gather as much information as possible about the required skills needed to be useful in that sector.
    </p>

    <p>
    I was able to contact an ESA (European Space Agency) employee and ask some questions about the industry as a whole and opportunities for software engineers with different backgrounds. I also explored multiple career sites from companies that work in the space sector and reviewed the required and desirable skills for software-related roles.
    </p>

    <p>
    From what I found, Java is mostly used for Space Ground Systems, and C and C++ are used for onboard software. I also saw Python, Ada, Fortran and C# for some positions.
    </p>

    <p>
    As one might expect, there are also expectations regarding scripting languages, databases, operating systems, version control systems, etc. Requirements differ depending on seniority and project type, but during this research, I also kept encountering "ECSS" repeatedly.
    </p>

    <p>
    After some digging, I found that ECSS stands for the European Cooperation for Space Standardization. According to the official website, this is "an initiative established to develop a coherent, single set of user-friendly standards for use in all European space activities."
    </p>

    <p>
    There are MANY standards there, but the good news is that I probably do not need to know them all and that I can access them for free.
    </p>

    <p>
    Right now, I plan to get familiar with the following:
    E-10 (system engineering)
    E-40 (software engineering)
    Q-80 (software product assurance)
    </p>

    <p>
    There are slides and recorded training sessions available on the official website. I might need to watch them all at some point.
    </p>

    <p>
    <a href="https://ecss.nl/ecss-training/training-material/ecss-training-material-downloads/">ECSS training material</a>
    </p>
    ]]></description>
  </item>
  <item>
    <title>Amfora - Gemini Client</title>
    <link>https://cdrmack.dev/posts/2024-04-04_amfora_gemini_client.html</link>
    <author> (cdrmack)</author>
    <guid isPermaLink="false">https://cdrmack.dev/posts/2024-04-04_amfora_gemini_client.html</guid>
    <pubDate>Thu, 04 Apr 2024 00:00:00 +0200</pubDate>

    <description><![CDATA[<p>
    If you want to play around with the Gemini Protocol on FreeBSD you use can program called <code>amfora</code> to view Gemini Capsules. It's a terminal browser easily available via <code>pkg(8)</code>.
    </p>

    <div class="org-src-container">
    <pre class="src src-shell">pkg install amfora
    </pre>
    </div>

    <p>
    When you run <code>amfora</code> you can press <code>?</code> to see list of shortcuts.
    </p>

    <p>
    My most used shortcuts:
    <code>1-0</code> go to links 0-10
    <code>SPC</code> enter address or link ID
    <code>b</code> go back in history
    <code>f</code> go forward in history
    <code>C-b</code> open bookmarks
    <code>C-d</code> add, change or remove bookmark
    </p>

    <p>
    If you want to go to link "11" press <code>SPC</code>, enter link ID (11) and press enter.
    </p>
    ]]></description>
  </item>
  <item>
    <title>Road to Space</title>
    <link>https://cdrmack.dev/posts/2024-03-24_road_to_space.html</link>
    <author> (cdrmack)</author>
    <guid isPermaLink="false">https://cdrmack.dev/posts/2024-03-24_road_to_space.html</guid>
    <pubDate>Sun, 24 Mar 2024 00:00:00 +0100</pubDate>

    <description><![CDATA[<p>
    It's been 10 years since I started my first job as a software engineer. During these years, I have worked in a few different industries, and the older I get, the more often I ask myself - what's even the point? I do not see any bigger purpose in my life and my work. I feel I'm not changing anything and have almost no impact on people's lives and the world around me. I started playing around with computers at a young age, and I knew very quickly that I wanted my career to be close to computers. My whole education was aimed towards it. I was passionate about learning and experimenting with things for years. I do not really know when I lost myself. I think I got sucked into chasing things I do not really care about, money being just an example. Money is nice, money is actually necessary to some degree, but at some level, you just don't need more, but you still want them - why?
    </p>

    <p>
    I think the following quote from "The Hitchhiker’s Guide to the Galaxy" by Douglas Adams is pretty accurate in that regard.
    </p>

    <blockquote>
    <p>
    "This planet has—or rather had—a problem, which was this: most of the people living on it were unhappy for pretty much of the time. Many solutions were suggested for this problem, but most of these were largely concerned with the movements of small green pieces of paper, which is odd because on the whole it wasn’t the small green pieces of paper that were unhappy."
    </p>
    </blockquote>

    <p>
    I have decided that I need to make a big change and reevaluate my life and the situation I am in. Who do I want to be? What makes me happy? What do I enjoy doing? Is my ego controlling me? What is the motivation for my activities? I like learning. I actually kept learning different things for years during my free time. I have some experience in academia and research. I studied and worked abroad. I like working in an international environment, would love to learn more languages, and keep learning things that can actually be used to make the world a bit better.
    </p>

    <p>
    I know there are many industries that can satisfy all these requirements, but I have decided to do my best to enter the Space Industry. I do not yet know how many things I'm missing to be valuable there, but I'm more excited than I have been in years when I even think about this. I have made my decision already; now I need to do the work to get there. Wish me luck!
    </p>
    ]]></description>
  </item>
  <item>
    <title>Fonts Location</title>
    <link>https://cdrmack.dev/posts/2024-02-27_fonts_location.html</link>
    <author> (cdrmack)</author>
    <guid isPermaLink="false">https://cdrmack.dev/posts/2024-02-27_fonts_location.html</guid>
    <pubDate>Tue, 27 Feb 2024 00:00:00 +0100</pubDate>

    <description><![CDATA[<p>
    I have always stored my fonts inside the <code>~/.fonts</code> directory.
    </p>

    <p>
    I have decided to move all of them to <code>/usr/local/share/fonts/</code> after reading <code>/usr/local/etc/fonts/fonts.conf</code> file.
    </p>

    <p>
    This is what I have found inside:
    </p>
    <div class="org-src-container">
    <pre class="src src-shell">&lt;!-- Font directory list --&gt;

    &lt;dir&gt;/usr/local/share/fonts&lt;/dir&gt;

    &lt;dir prefix="xdg"&gt;fonts&lt;/dir&gt;
    &lt;!-- the following element will be removed in the future --&gt;
    &lt;dir&gt;~/.fonts&lt;/dir&gt;
    </pre>
    </div>

    <p>
    Based on the comment "the following element will be removed in the future" I think it's safe to assume that <code>~/.fonts</code> might stop working at some point.
    </p>

    <p>
    Remember to run <code>fc-cache(1)</code> to scan the font directories and build cache files.
    I usually run it with <code>-f</code> flag to force re-generation.
    </p>
    ]]></description>
  </item>
  <item>
    <title>WireGuard</title>
    <link>https://cdrmack.dev/posts/2023-11-28_wireguard.html</link>
    <author> (cdrmack)</author>
    <guid isPermaLink="false">https://cdrmack.dev/posts/2023-11-28_wireguard.html</guid>
    <pubDate>Tue, 28 Nov 2023 00:00:00 +0100</pubDate>

    <description><![CDATA[<p>
    After upgrading my system to FreeBSD 14.0 I have decided to try WireGuard.
    I have never used it before and even after reading <code>wg(8)</code> I didn't really know how to make it work.
    After reading few articles I have found about <code>wg-quick(8)</code> that made the whole setup a bit simpler.
    </p>

    <p>
    WireGuard is now part of the FreeBSD kernel so there is no need to install it manually.
    The only thing I have installed is <code>wireguard-tools</code> to get <code>wg-quick</code>.
    </p>

    <div class="org-src-container">
    <pre class="src src-shell">pkg install wireguard-tools
    </pre>
    </div>

    <p>
    You need to get a WireGuard INI-like config file from your provider.
    See the example below from the <code>wg(8)</code> man pages.
    </p>

    <pre class="example" id="orgd45be8a">
    [Interface]
    PrivateKey = yAnz5TF+lXXJte14tji3zlMNq+hd2rYUIgJBgB3fBmk=
    ListenPort = 51820

    [Peer]
    PublicKey = xTIBA5rboUvnH4htodjb6e697QjLERt1NAB4mZqp8Dg=
    Endpoint = 192.95.5.67:1234
    AllowedIPs = 10.192.122.3/32, 10.192.124.1/24
    </pre>

    <p>
    Next we need to generate public and private key for our machine.
    I have created <code>/etc/wireguard/</code> directory and run the following as a root user:
    </p>

    <div class="org-src-container">
    <pre class="src src-shell">umask 077
    wg genkey | tee private.key | wg pubkey &gt; public.key
    </pre>
    </div>

    <p>
    WireGuard protects these files by enforcing that only root should be able read them.
    This is why we run <code>umask</code> first.
    </p>

    <p>
    You can move your config file to <code>/etc/wireguard/</code>.
    This is the default directory that <code>wg-quick</code> uses to find config files.
    </p>

    <p>
    You can start WireGuard by providing path to the config file:
    </p>
    <div class="org-src-container">
    <pre class="src src-shell">wg-quick up /etc/wireguard/sample.conf
    </pre>
    </div>

    <p>
    or provide just the config name if it's inside <code>/etc/wireguard/</code>.
    </p>

    <div class="org-src-container">
    <pre class="src src-shell">wg-quick up sample
    </pre>
    </div>

    <p>
    You can disable it with <code>wg-quick down sample</code> and see running connections with <code>wg</code>.
    </p>
    ]]></description>
  </item>
  <item>
    <title>Emacs Server</title>
    <link>https://cdrmack.dev/posts/2023-11-04_emacs_server.html</link>
    <author> (cdrmack)</author>
    <guid isPermaLink="false">https://cdrmack.dev/posts/2023-11-04_emacs_server.html</guid>
    <pubDate>Sat, 04 Nov 2023 00:00:00 +0100</pubDate>

    <description><![CDATA[<p>
    People often claim that Emacs is slower compared to other editors, particularly when using multiple external packages.
    Personally, I start Emacs in "server-mode" alongside my graphical environment, allowing me to quickly connect to that server later on.
    </p>

    <p>
    It can be easily done by editing <code>~/.xinitrc</code> file (this file is being used by <code>xinit(1)</code> to start the X Window System server and a first client program).
    </p>

    <div class="org-src-container">
    <pre class="src src-shell"># .xinitrc
    # ...
    emacs --daemon
    # ...
    </pre>
    </div>

    <p>
    According to <code>emacs(1)</code> the <code>emacs --daemon</code> command starts Emacs as daemon (o rly?), enables Emacs server and disconnects from the terminal.
    </p>

    <p>
    With server running in the background, we can connect to it with the <code>emacsclient(1)</code> command:
    </p>
    <div class="org-src-container">
    <pre class="src src-shell">emacsclient -c -a ""
    </pre>
    </div>

    <p>
    To create a new frame, the flag <code>-c</code> is used. This is particularly useful when Emacs is already open but you don't want to reuse the existing frame.
    The second flag, <code>-a</code>, initiates an alternate editor if the Emacs server is not running. If it's left empty, as in this case, it runs <code>emacs --daemon</code> and attempts to connect to it.
    </p>

    <p>
    To make my life easier, I have placed that line in a file named <code>ec</code>, made it executable, and saved it in a directory within my <code>PATH</code> (in my case, it is <code>/usr/local/bin/</code>).
    Now, I can launch the Emacs client just like any other program.
    </p>
    ]]></description>
  </item>
</channel>
</rss>
